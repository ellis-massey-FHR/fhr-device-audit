import os
import json
from pathlib import Path
import requests
from requests.auth import HTTPBasicAuth
from dotenv import load_dotenv
import pandas as pd
import matplotlib.pyplot as plt
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
from openpyxl.drawing.image import Image as XLImage
from openpyxl.styles import Font, Alignment

# Load environment
env_path = Path(__file__).resolve().parent / "servicenow.env"
load_dotenv(dotenv_path=env_path)

instance = os.getenv("SERVICENOW_INSTANCE")
username = os.getenv("SERVICENOW_USER")
password = os.getenv("SERVICENOW_PASS")

print("ENV path:", env_path)
print("Instance loaded:", instance)
print("Username loaded:", username)
print("Password loaded:", bool(password))

def fetch_details(link):
    if not link:
        return {}
    res = requests.get(link, auth=HTTPBasicAuth(username, password), params={"sysparm_display_value": "true"})
    if res.status_code == 200:
        return res.json().get("result", {})
    return {}

def format_workstation_string(ws_string):
    return ws_string.replace("\\n", ", ").replace("\\r", "").replace("\n", ", ").replace("\r", "").strip().lstrip(", ")

def get_current_workstation_from_ci(user_sys_id):
    ci_url = f"{instance}/api/now/table/cmdb_ci_computer"
    params = {
        "sysparm_query": (
            f"assigned_to={user_sys_id}"
            "^install_status=1"
            "^model_category.name=Computer"
            "^sys_class_name=cmdb_ci_computer"
            "sys_class_name=cmdb_ci_handheld_computing"
            "^life_cycle_stage_status.name=In Use"
            "^last_discoveredRELGTjavascript:gs.monthsAgoStart(3)"
            "^hardware_status!=retired"
            "^ORDERBYDESClast_discovered"
        ),
        "sysparm_limit": "3",
        "sysparm_display_value": "true"
    }
    res = requests.get(ci_url, auth=HTTPBasicAuth(username, password), params=params)
    if res.status_code == 200:
        records = res.json().get("result", [])
        if records:
            devices = []
            for r in records:
                name = r.get("name")
                sccm = "SCCM" if r.get("u_sccm_record") else "Modern"
                if name:
                    devices.append(f"{name} ({sccm})")
            return format_workstation_string(", ".join(devices))
    return None

# Query ServiceNow
url = f"{instance}/api/now/table/sc_req_item"
params = {
    "sysparm_query": (
        "company.name=Flint Hills Resources"
        "^u_new_hire=false"
        "^cat_item.nameLIKElaptop"
        "^ORcat_item.nameLIKEsurface"
        "^opened_atRELGTjavascript:gs.daysAgoStart(60)^ORclosed_atRELGTjavascript:gs.daysAgoStart(60)"
        "^ORDERBYDESCclosed_at"
    ),
    "sysparm_display_value": "all",
    "sysparm_limit": "10"
}

response = requests.get(url, auth=HTTPBasicAuth(username, password), params=params)

if response.status_code == 200:
    print("‚úÖ Success!")
    data = response.json()
    print(f"Total records returned: {len(data['result'])}")

    rows = []
    for item in data["result"]:
        print("‚Üí Processing item ID:", item.get("sys_id"))

        requested_for_info = fetch_details(item.get("requested_for", {}).get("link"))

        user_location = (
            requested_for_info.get("location", {}).get("display_value")
            or requested_for_info.get("u_location", {}).get("display_value")
            or requested_for_info.get("u_site_id")
            or "Unknown"
        )

        user_sys_id = requested_for_info.get("sys_id")
        recent_ws = get_current_workstation_from_ci(user_sys_id)

        if not recent_ws:
            recent_ws = format_workstation_string(requested_for_info.get("u_workstations", ""))

        rows.append({
            "Requested For": item.get("requested_for", {}).get("display_value", "Unknown"),
            "Requested For Email": requested_for_info.get("email", "Unknown"),
            "Requested For Location": user_location,
            "Catalog Item": item.get("cat_item", {}).get("display_value", "Unknown"),
            "Created": item.get("opened_at", {}).get("display_value", "Unknown") if isinstance(item.get("opened_at"), dict) else item.get("opened_at", "Unknown"),
            "Closed": item.get("closed_at", {}).get("display_value", "Unknown") if isinstance(item.get("closed_at"), dict) else item.get("closed_at", "Unknown"),
            "Workstations": recent_ws or "Unknown"
        })

    df = pd.DataFrame(rows)

    def normalize_location(loc):
        if not loc:
            return "Unknown"
        loc = loc.upper()
        if "CORPUSCHRISTI" in loc or "CORPUS CHRISTI" in loc:
            return "Corpus Christi"
        elif "ROSEMOUNT" in loc or "PINE BEND" in loc:
            return "Rosemount"
        elif "WICHITA" in loc:
            return "Wichita"
        else:
            return "Other"

    df["Location Group"] = df["Requested For Location"].apply(normalize_location)

    df.to_csv("filtered_laptop_requests.csv", index=False)
    print("üìÅ Data written to filtered_laptop_requests.csv")

    excel_path = "filtered_laptop_requests.xlsx"
    df.to_excel(excel_path, index=False, engine="openpyxl")

    wb = load_workbook(excel_path)
    ws = wb.active

    ws.insert_rows(1)
    header_text = "FHR Laptop Requests Report"
    total_columns = ws.max_column
    end_col_letter = get_column_letter(total_columns)
    ws.merge_cells(f"A1:{end_col_letter}1")
    header_cell = ws["A1"]
    header_cell.value = header_text
    header_cell.font = Font(size=16, bold=True)
    header_cell.alignment = Alignment(horizontal="center", vertical="center")

    for col in ws.columns:
        max_length = 0
        column = col[0].column
        col_letter = get_column_letter(column)
        for cell in col:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        if ws.cell(row=2, column=column).value == "Workstations":
            ws.column_dimensions[col_letter].width = 40
        else:
            ws.column_dimensions[col_letter].width = max_length + 2

    logo_path = "fhr_logo.png"
    if Path(logo_path).exists():
        logo = XLImage(logo_path)
        logo.width = 120
        logo.height = 40
        ws.add_image(logo, "A2")
        print("üñºÔ∏è Logo inserted at A2")
    else:
        print("‚ö†Ô∏è Logo file not found:", logo_path)

    location_counts = df["Location Group"].value_counts()

    def make_autopct(values):
        def my_autopct(pct):
            total = sum(values)
            count = int(round(pct * total / 100.0))
            return f"{count}"
        return my_autopct

    chart_path = "location_pie_chart.png"
    plt.figure(figsize=(6, 6))
    plt.pie(location_counts, labels=location_counts.index, autopct=make_autopct(location_counts), startangle=140)
    plt.title(f"Laptop Requests by Location (Total: {location_counts.sum()})")
    plt.axis("equal")
    plt.tight_layout()
    plt.savefig(chart_path)
    plt.close()
    print("üìä Pie chart saved as", chart_path)

    img = XLImage(chart_path)
    img.width = 350
    img.height = 350
    ws.add_image(img, "J6")

    wb.save(excel_path)
    print(f"üìÅ Excel with embedded chart saved to {excel_path}")

else:
    print(f"‚ùå Error: {response.status_code}")
    print(response.text)